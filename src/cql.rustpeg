use cql::*;


// https://cassandra.apache.org/doc/cql3/CQL.html#createTableStmt

#[pub]
cql_statement -> ParsedCqlStatement
    = select_statement
    / insert_statement
    / delete_statement
    / update_statement

select_statement -> ParsedCqlStatement
    = select
      fields:fields_or_star
      from table:table
      where_clauses:where_clauses?
      order_by:order_by_clause?
      limit:limit_clause? semi?
    {
        let s = SelectStatement::new(fields,
                                     table,
                                     where_clauses,
                                     order_by,
                                     limit);
        ParsedCqlStatement::Select(s)
    }

insert_statement -> ParsedCqlStatement
    = "insert" into  table:table __
        "(" fields:fields ")"
        values "(" values:comma_separated_values  ")" __
        lwt:if_not_exists?
        using_clause:using_clause? semi?
      {?
          // fields can't be all
          match fields {
            Fields::All  =>
                Err("no * on insert bro"),
            _ => {
              let i = InsertStatement::new(table, fields, values, lwt.is_some());
              Ok(ParsedCqlStatement::Insert(i))
            }
          }
      }

delete_statement -> ParsedCqlStatement
    = delete from table:table
      where_clauses:where_clauses semi?
      {
        let d = DeleteStatement::new(table);
        ParsedCqlStatement::Delete(d)
      }

update_statement -> ParsedCqlStatement
    = update table:table
        using_clause:using_clause?
        set assignments:assignment ++ comma
        where_clauses:where_clauses
        lwt:if_clause?
        semi?
        {
            let u = UpdateStatement::new(table);
            ParsedCqlStatement::Update(u)
        }

#[pub]
where_clauses -> Vec<Predicate> = where __ predicates __
    { Vec::new() }

#[pub]
where_clause -> Predicate
    = where __ pred:predicate __ { pred }

predicates = __ predicate ++ and __

#[pub]
predicate -> Predicate
    = field:field __ op:op __ value
    { Predicate::new(field, op) }

op -> String
    = ('=' / '<' / '>' / '<=' / '>=' / "contains"i / "contains key"i)
    {  match_str.to_string() }


plus = "+" __
minus = "-" __
comma = __ "," __
delete = "delete" __
placeholder_old = __ "?" __
placeholder -> Value = __ "?" __ { Value::Placeholder }
and = __ "and"i __
from = __ "from"i __
where = __ "where"i  __
single_quote = "'"

star -> Fields
    = __ "*" __ { Fields::All }

select =  "select"i __

field -> String
    = __ [a-zA-Z0-9]+ __ { match_str.trim().to_string() }

#[pub]
comma_separated_values -> Vec<Value>
    = value ++ comma

#[pub]
value -> Value
     = i:int __  { Value::Int(i) }
     /  i:placeholder { Value::Placeholder }
     / i:uuid { i }
     / i:quoted_string { i }

values = __ "values"i __
update = "update"i __
set = __ "set"i __
into = __ "into"i __
using = "using"i __
if_not_exists = __ "if"i __ "not"i __ "exists" __
timestamp = "timestamp"i __
ttl = "ttl"i __
eq = "=" __
lbracket = "{" __
rbracket = "}" __
if = "if"i __
colon = ":" __
semi = ";" __
dash = "-"

if_clause = if if_condition ++ "and"
if_condition = (field eq placeholder_old) /
                (field "[" field "]" eq placeholder_old)

#[pub]
using_clause -> Vec<UsingOption>
             = using options:using_option ++ "and"i __
             { options }

using_option -> UsingOption
    = timestamp_clause / ttl_clause

timestamp_clause -> UsingOption
                = timestamp i:int { UsingOption::Timestamp(i) }

ttl_clause -> UsingOption
    = ttl i:int { UsingOption::TTL(i) }

order_by_clause -> String
    = "order" __ "by" __ field __ order_direction?
    { match_str.to_string() }

asc = "asc"i
desc = "desc"i
order_direction = asc / desc

#[pub]
assignment = (field eq placeholder_old) / counter_op

#[pub]
counter_op = field eq field (plus / minus)
                (i:int { Value::Int(i) } / placeholder ) { () }

#[pub]
map_literal = lbracket (field colon placeholder_old ++ comma) rbracket

#[pub]
fields -> Fields
    = fields:(field ++ comma)
    { Fields::Named(fields) }


#[pub]
fields_or_star -> Fields
    = fields / star

table -> String
    = [a-zA-Z]+ __  { match_str.to_string() }

limit = "limit"i __

int -> isize
    = dash? [1-9][0-9]*
    { match_str.trim().parse().unwrap() }

limit_clause -> isize
    = __ limit i:int __ { i }

__ = (whitespace / eol)*

whitespace
  = [ \t\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}] // \v\f removed

eol
  = "\n"
  / "\r\n"
  / "\r"
  / "\u{2028}"
  / "\u{2029}"

hex -> String
    = [0-9a-fA-F] { match_str.to_string() }

#[pub]
uuid -> Value
    = hex{8} dash hex{4} dash hex{4} dash hex{4} dash hex{12}
    {
        Value::UUID(match_str.to_string())
    }

string -> String
    = ([^\'] / "''")*
    {
        match_str.to_string()
    }

#[pub]
quoted_string -> Value
    = __ single_quote
      s:string
      single_quote __
    {
        Value::String(s)
    }
